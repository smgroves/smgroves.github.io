<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://smgroves.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://smgroves.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-23T19:45:09+00:00</updated><id>https://smgroves.github.io/feed.xml</id><title type="html">blank</title><subtitle>Cancer Systems Biologist &amp; Data Scientist </subtitle><entry><title type="html">Cahn Hilliard Dynamics</title><link href="https://smgroves.github.io/blog/2025/cahn_hilliard_alpha/" rel="alternate" type="text/html" title="Cahn Hilliard Dynamics"/><published>2025-03-11T00:00:00+00:00</published><updated>2025-03-11T00:00:00+00:00</updated><id>https://smgroves.github.io/blog/2025/cahn_hilliard_alpha</id><content type="html" xml:base="https://smgroves.github.io/blog/2025/cahn_hilliard_alpha/"><![CDATA[ <head> <meta http-equiv="refresh" content="0; url=/julia/cahn_hilliard_with_alpha.html"/> </head>]]></content><author><name></name></author><category term="phase-separation"/><category term="visual"/><category term="explainers"/><summary type="html"><![CDATA[Constraining parameters in the Cahn Hilliard equation to model biological condensates in mitosis.]]></summary></entry><entry><title type="html">This is how we solve the problem of cancer</title><link href="https://smgroves.github.io/blog/2024/systems-biology-video/" rel="alternate" type="text/html" title="This is how we solve the problem of cancer"/><published>2024-12-09T00:00:00+00:00</published><updated>2024-12-09T00:00:00+00:00</updated><id>https://smgroves.github.io/blog/2024/systems-biology-video</id><content type="html" xml:base="https://smgroves.github.io/blog/2024/systems-biology-video/"><![CDATA[<p>As the Education Scholar for UVA’s SASCO Center, a U54 Center funded by the NIH, I was tasked with creating a video introducing clinicans to systems biology. In the end, I made a video focusing on three main things:</p> <ol> <li><strong>WHAT is systems biology?</strong> Systems biology is difficult to define, so I explore the history of the term and interview UVA scientists to determine a cohesive definition of the field.</li> <li><strong>WHY do we need systems approaches in cancer?</strong> Because cancer is a complex system, reductionist approaches are not enough to figure out why things go wrong, such as adaptive resistance.</li> <li><strong>HOW do systems approaches get used in the clinic today?</strong> While systems biology is a relatively new field, some successes have already made their way through clinical trials and are influencing treatment today, such as adaptive therapy approaches.</li> </ol> <p>TO make this video accessible to a wide audience, I incorporated several examples, such as treatment options, and analogies, such as weather modeling.</p> <p>The full video is linked below:</p> <iframe width="560" height="315" src="https://www.youtube.com/embed/rmuj1cyIn44?si=NUnoQAvzIfcvTXEt" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe> <p>If you are interested in using snippets of this video for educational purposes, I have also made alternative, shorter videos that can be used in a classroom or other educational setting. The video below contains most of the same information as above without the long explaination of what complexity is. This video would be useful for an audience of clinicians, as it more directly focuses on the applicability of systems biology ideas to the clinic.</p> <iframe width="560" height="315" src="https://www.youtube.com/embed/Cp9tarAeZe8?si=jJCzoSGTSd97kZl9" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe> <p>Finally, I pulled out the section on complexity as its own video. This can be paired with the shorter video above (notice the link within the previous video for those curious for more information). This video focuses on the weather analogy for complex systems. This video would be useful for a classroom setting, when a shorter video would be helpful. It explains the why behind systems biology: many systems are too complex to understand without specialized systems approaches.</p> <iframe width="560" height="315" src="https://www.youtube.com/embed/C3iXBMQv3jA?si=cpl_GU9RFS6U_gUB" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe> <p>I greatly enjoyed making this resource for the systems biology community. Please acknowledge credit to Sarah Groves if you reproduce this video. If possible, share the Youtube links (embedded above) so that we can keep track of usage.</p>]]></content><author><name></name></author><category term="systems-biology"/><category term="visual"/><category term="explainers"/><summary type="html"><![CDATA[As the Education Scholar for UVA's NIH-funded Center, I created a video series about systems biology and its use in cancer research.]]></summary></entry><entry><title type="html">Network Control of Cell Identity and Plasticity in Small Cell Lung Cancer</title><link href="https://smgroves.github.io/blog/2022/dissertation/" rel="alternate" type="text/html" title="Network Control of Cell Identity and Plasticity in Small Cell Lung Cancer"/><published>2022-03-15T00:00:00+00:00</published><updated>2022-03-15T00:00:00+00:00</updated><id>https://smgroves.github.io/blog/2022/dissertation</id><content type="html" xml:base="https://smgroves.github.io/blog/2022/dissertation/"><![CDATA[<p>One of my goals with my dissertation presentation was to make it accessible to a wide audience, including fellow grad students, professors, and family and friends. I use animation to accomplish this, starting from the basics of cell identity and ending with the impact my research on small cell lung cancer could have on treatment decisions.</p> <iframe src="https://onedrive.live.com/embed?resid=B9339AD34A30F7D3%21282&amp;authkey=!AEw-ip3eFOKcpVk&amp;em=2&amp;wdAr=1.7777777777777777" width="1190px" height="720px" frameborder="0">This is an embedded <a target="_blank" href="https://office.com">Microsoft Office</a> presentation, powered by <a target="_blank" href="https://office.com/webapps">Office</a>.</iframe>]]></content><author><name></name></author><category term="booleabayes"/><category term="visual"/><summary type="html"><![CDATA[One of my goals with my dissertation presentation was to make it accessible to a wide audience, including fellow grad students, professors, and family and friends. I use animation to accomplish this, starting from the basics of cell identity and ending with the impact my research on small cell lung cancer could have on treatment decisions.]]></summary></entry><entry><title type="html">BooleaBayes Part 3- Using data to build a network for Small Cell Lung Cancer</title><link href="https://smgroves.github.io/blog/2021/booleabayes3/" rel="alternate" type="text/html" title="BooleaBayes Part 3- Using data to build a network for Small Cell Lung Cancer"/><published>2021-02-23T00:00:00+00:00</published><updated>2021-02-23T00:00:00+00:00</updated><id>https://smgroves.github.io/blog/2021/booleabayes3</id><content type="html" xml:base="https://smgroves.github.io/blog/2021/booleabayes3/"><![CDATA[<p>We’ve talked about why we care about transcription factor networks. We’ve talked about what the structure and rules of a network might look like. In this post, we’ll talk a little more specifically about how we can use high-dimensional data from sequencing experiments to determine the structure and rules of a network.</p> <p>In the last post, in the party puzzle, I gave you rules for each person– how they decide whether or not they want to go to the party. But how do we figure out what these rules should be, if we don’t know them ahead of time?</p> <p>In terms of the party puzzle, we might have a scenario like this:</p> <ol> <li>There have been quite a few parties in the past, and attendees were recorded each time (“samples”).</li> <li>Each person always used the same “rule” to decide whether they will go or not– the rule is considered <i>time invariant</i>.</li> <li>We want to figure out these rules for each person, even though we <b>only</b> know who went to each party.</li> </ol> <div class="img"> <img src="/assets/img/bb/attendees.jpeg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>This is a really hard problem, and could be considered a problem of <i>reverse engineering</i>. In fact, it’s hard enough that it would be difficult for me to even come up with a list of “past party attendees” (samples) that would allow you to find a unique set of rules for everyone.</p> <p>What would make this problem easier?</p> <p>Maybe we could use our knowledge of who’s friends with who (and who’s enemies with who) to make an educated guess about what influences each person’s decisions. For example, if we know that Carrie is good friends with Daniel, we might assume that Carrie will base her decision on whether or not Daniel decides to go (this is, in fact, her rule). This is called “prior knowledge,” or often in biology, “expert knowledge.” Expert knowledge is often how we come up with the connections in a transcription factor network.</p> <p>Gene regulatory networks (or transcription factor networks) can be made for an abundance of biological systems, including cancer. I focus on Small Cell Lung Cancer, which is an extremely deadly form of lung cancer. While SCLC patients make up only 15% of lung cancer patients, the five-year survival rate is around 6% (compared to ~25% for other types of lung cancer).</p> <p>Just like we talked about in the first post, Small Cell Lung Cancer cells can easily change their cell identity. Sort of like a deranged differentiation, SCLC cells can change cell types according to what functions they need to optimize. Early on, it seems like cells start in a proliferative cell type that can grow the tumor quickly. In later stages, some cells can change to a cell type that is good at migrating to other places in the body, thereby seeding metastases in places like the lymph nodes and brain. Interestingly, we think this is how cells are able to avoid death from chemotherapy; some of the cells die from chemo (and the tumor will shrink), but we think some change their cell identity and evade the treatment, allowing the tumor to eventually regrow.</p> <blockquote> <p>If we can understand and control how cells change their identity, we may be able to develop more effective treatments for this deadly cancer.</p> </blockquote> <p>We already talked about what we need to learn to figure this out: how is the transcription factor network controlling these changes in cell identity?</p> <p>To answer this question, we developed a tool called BooleaBayes– an algorithm that can take in data and reverse engineers the rules of the network controlling that data. Just like in the party scenario, we first would like to figure out the structure of the network, which we do using expert knowledge. There’s a really cool type of experiment that can figure out what proteins (transcription factors) are binding to what pieces of DNA (genes). It’s called ChIP-seq, and essentially the method uses a cool trick to “tie together” any proteins that are bound to DNA (normally in a live cell these proteins will bind and fall off the DNA pretty quickly). The scientist then “shakes up” the DNA to break it into little pieces, and pulls out the pieces of DNA with the specific transcription factor of interest bound to them. Once these pieces of DNA are sequenced, the scientist can figure out which genes are controlled by that transcription factor. This is akin to determining the edges in the network: which proteins (transcription factors) affect other genes?</p> <p>Lucky for us, many of these experiments’ results have been compiled into databases, so we looked at the databases to come up with a network connecting transcription factors we know are important in SCLC.</p> <p>So we have a good idea of which proteins are affecting other genes. But <b>how</b>? For example, we might know that proteins A, B, and C affect gene D, but the rule could be many different things:</p> <ul> <li>D expression = A and B and C</li> <li>D = A or B or C</li> <li>D = A and B and not C …</li> </ul> <p>To determine which one is the right rule, we need some data. This is the second (main) piece of our BooleaBayes algorithm: we use sequencing data to determine what rules define the interactions between transcription factors. Don’t forget the <strong>big picture</strong> here:</p> <blockquote> <p>If we know how transcription factors interact with each other (by figuring out the rules), we can understand– and control– changes in cell identity, and hopefully change recalcitrant cancers into easy-to-treat ones.</p> </blockquote> <p>Similar to our party example above, if we have many “samples,” in this case with different levels of transcription factors in each one, we can determine which transcription factors are co-expressed (positive relationship) and which are inversely correlated (negative relationship). Let’s look at another example, more specific to our current problem.</p> <p>We’ll consider a simple transcription factor network with only 4 genes, A, B, C, and D:</p> <div class="img"> <img src="/assets/img/bb/4_node_network.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>We also have data that tells us, for RNA sequenced from different samples (which could be different people, tumors, mice, etc), which transcription factors are highly expressed in that sample and which are low. We’ll simplify this, as we did above, to two options: ON or OFF, yes or no, 1 or 0. So each sample data point will look something like this:</p> <div class="img"> <img src="/assets/img/bb/samples.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>Remember how, in the last blog post, we considered every possible combination of the “parent nodes,” or the ones affecting the thing we care about, by making a table? We can represent this in another, more compact, way:</p> <div class="img"> <img src="/assets/img/bb/4_node_tress.jpeg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>In this “tree,” we’ve enumerated every possible combination of nodes A, B, and C as leaves at the bottom. For example, if we want to know what happens when A, B, and C are all off, we can look at the first leaf:</p> <div class="img"> <img src="/assets/img/bb/1st_node.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>Or when A and B are off, but C is on:</p> <div class="img"> <img src="/assets/img/bb/2nd_node.jpeg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>Right now, we don’t know what goes in the boxes for node D: that’s the goal!</p> <p>What we do have, though, is sample data, which gives us some <em>possible</em> combinations of A, B, C, and D. For example, sample 1 can help us figure out what happens in the 5th leaf from the left:</p> <div class="img"> <img src="/assets/img/bb/sample1.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>and sample 2 can help us with the 6th leaf:</p> <div class="img"> <img src="/assets/img/bb/sample2.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>If we have enough samples, we can fill in all the nodes!</p> <div class="img"> <img src="/assets/img/bb/rule-fitting.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>Even though this “rule” isn’t in English, like our party rules were, it gives us the same information: for every possible combination of ON and OFF (going vs. not going) of our parent nodes (friends), we know what will happen to some affected gene (person of interest). So if we have a rule like this for each node in the network, we’ve solved our problem! We know which transcription factors will turn on (“who goes to the party”) no matter what configuration of ON and OFF we start with.</p> <p>Not so fast! you say. What happens if two samples don’t agree? This might happen when a cell is in the process of changing its identity (phenotypically transitioning), multiple similar cell types are stable and thus found in the sample data, or it might just be due to noise in the system.</p> <div class="img"> <img src="/assets/img/bb/disagree.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>Our solution is pretty easy. Even though we eventually want to describe everything as either ON or OFF, in these rules, we can give a <em>probability</em> of being ON (or OFF). So instead of a 0 or 1, in the case of two “disagreeing” samples, we would have this scenario:</p> <div class="img"> <img src="/assets/img/bb/disagree_solve.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>This is basically the same as a situation where Carrie will go 50% of the time if Daniel goes– if Daniel is going, she flips a coin to decide; if he isn’t going, she still won’t go either.</p> <p>At the end of the previous post, we used tables and state transition graphs to “move through different states” and figure out who was going to the party. Another way to visualize this is like below:</p> <div class="img"> <img src="/assets/img/bb/migration_party.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>We started at some (random) starting state, and then slowly updated our knowledge of who was going and who was not until our knowledge didn’t change anymore. In the picture above, we “move” from one state to another, slowly updating them, until we reach a state where we don’t move anymore.</p> <p>We do a similar thing with these rules for our transcription factor network, now moving through “gene expression space,” where transcription factor expression for each gene can be ON (1) or OFF (0).</p> <div class="img"> <img src="/assets/img/bb/migration.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>The final piece of the BooleaBayes algorithm is to simulate this movement through the gene expression space. You can think of it this way: if a cell happened to find itself in a state that was “not allowed,” according to the rules, it will quickly move away from that state towards a more stable one, where it is stable. This is like a ball at the top of the hill (in the first post) rolling down to a valley and coming to rest. When we simulate a system, we use the rules we just found, along with some starting state (that probably is meaningful biologically), and we watch where the cell moves until it becomes stable.</p> <div class="img"> <img src="/assets/img/bb/migration_landscape.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>In real life, this is how we think about cells changing their identity: they might get a small “push,” or signal, from their environment to change away from their starting state, and the rules of interaction determine exactly how they change identity.</p> <p>In <a href="https://smgroves.github.io/publications/">a paper</a> by David Wooten, PhD, and me, we find a network for Small Cell Lung Cancer cells, and use it to figure out what will happen if we start in different states, and where the stable states are. This gives us some ideas for how we might control the cancer cell’s identity, by predicting different perturbations we can make (for example, getting rid of a transcription factor entirely or turning it all the way up) that would change a cell’s ability to function. If we change cancer cell identity just right, we might be able to make them susceptible to treatments we already have in the clinic.</p>]]></content><author><name></name></author><category term="booleabayes"/><category term="writing"/><category term="code"/><category term="blog"/><summary type="html"><![CDATA[We begin to look at how BooleaBayes, the computational tool developed in the Quaranta lab by David Wooten, PhD and me, can be applied to Small Cell Lung Cancer Data.]]></summary></entry><entry><title type="html">BooleaBayes Part 2- Network Structure and Dynamics</title><link href="https://smgroves.github.io/blog/2021/booleabayes2/" rel="alternate" type="text/html" title="BooleaBayes Part 2- Network Structure and Dynamics"/><published>2021-02-05T00:00:00+00:00</published><updated>2021-02-05T00:00:00+00:00</updated><id>https://smgroves.github.io/blog/2021/booleabayes2</id><content type="html" xml:base="https://smgroves.github.io/blog/2021/booleabayes2/"><![CDATA[<p>In the first post, we took a look at why we might care about a gene regulatory network, or GRN. This post will focus on learning network structure and network dynamics.</p> <p>Every network has a specific structure, determined by its combination of nodes (also known as vertices, objects, and in this case transcription factors) and edges (or connections, interactions, or effects). For the network we care about (proteins regulating genes to control cell indentity), we have a <em>directed network</em>, where the edges have arrows. In our network, we’ll use a single node to represent both the <em>RNA form</em> and <em>protein form</em> of a specific gene. In other words, an incoming edge to some node X will represent a transcription factor <em>protein</em> binding to the promoter region of the X <em>gene</em>, and an outgoing edge will represent the X <em>protein</em> binding to the promoter of another <em>gene.</em></p> <div class="img"> <img src="/assets/img/bb/simple_network.jpg" style="height: 50%; width: 50%; object-fit: contain"/> </div> <p>Often, researchers really only care about the structure of the network itself and can gain a lot of information from it. For example, <a href="https://en.wikipedia.org/wiki/Network_controllability#:~:text=Network%20Controllability%20is%20concerned%20about,our%20intuitive%20notion%20of%20control."><em>structural controllability</em> </a> is concerned with the connections between nodes in the network, and how some sets of inputs are able to guide the network from any initial state to a specific, desired final state. Also, when we know which transcription factors affect others, we can look for <em>motifs</em> in the network, which are small patterns that tell us something about how the network will behave. <em>Feedback loops,</em> for example, are a common point of interest for researchers because they can drive changes in the network. A positive feedback loop is one that tends to amplify some signal, such as in blood clotting, where platelets release clotting factors that cause more platelets to aggregate at the site of injury, releasing even more factors, and so on. A negative feedback loop is one that tends to induce an opposite effect, like a thermostat regulating room temperature by comparing the actual temperature to the set temperature and adjusting (decreasing if the actual temperature is high, and vice versa). Negative feedback loops are very common in biology, as most of life functions within a relatively small range of environmental conditions (like temperature).</p> <p>You might be familiar with network structure from other disciplines, such as social networks, economic networks, Google’s network of webpages, networks of airports, or even food chains and networks. In all of these cases, there will be some components with many more connections and interactions than average,<sup>*</sup> such as Atlanta’s large international airport. In the case of airports, we might call these “hubs;” in systems biology, we call this idea “centrality.” From only the structure of a gene regulatory network, we can tell which transcription factors play the biggest roles in regulation, which participate in feedback loops, and which need to be controlled to control the entire network.</p> <p>When I teach graduate students about networks in a Cancer Systems Biology course I TA, we usually start with these more familiar types of networks before getting into the specifics of network dynamics. I find it helpful to keep these analogies in mind, and I’ll continue to use social networks as an example. Specifically, we will be focusing on a type of network called a Boolean network, where each node in the network can only have one of two states: ON or OFF.</p> <p>To think about this, let’s look at a little puzzle. In terms of social networks, we can think of each node as a person, the ON state as “going to a party,” and the OFF state as “not going to a party.” We’ll assume that peer pressure is strong, and each person in this social network decides to go to the party entirely based on the decisions of their friends or more popular kids at their school. They each start with a desire to go to the party or not (<em>initial condition</em>), but can very easily (<em>deterministically</em>) be swayed by their friends. So, who ends up going to the party, based on the “rules” and interactions below? I <strong>strongly</strong> suggest you try to solve, or at least think through how you would try to solve, the puzzle.</p> <div class="img"> <img src="/assets/img/bb/network.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="caption"> Who goes to the party? Edges represent friendships, and each node is one person (First letter of name labels the node). Do different "initial conditions" change who ends up going? </div> <p>This puzzle is trickier than it may look. There are actually several answers, depending on the “initial conditions.” For example, the solution if everyone starts with an initial desire not to go to the party (all OFF) will be different than the solution if everyone starts with an initial dsire to go (all ON). Why is this?</p> <p>Think about the landscape again. Different “initial conditions are like placing a ball in different locations on the landscape, and they will naturall roll into different basins (attractors).</p> <div class="img"> <img src="/assets/img/bb/landscape.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="caption"> The ball on the left will roll down into a "green" state, while the ball on the right will roll down into a "red" state. </div> <p>To truly solve the puzzle, we need to know what happens for <em>every</em> initial condition. Luckily, the <em>rules</em> that each person is following (the combination of friends going or not going that makes their decision) tells us exactly how to proceed.</p> <p>To see how, let’s start a little simpler and just look at Bob. Bob’s friends are Anna, Carrie, and Erin (A, C, and E). Because our network is <em>undirected,</em> any connection to Bob can be considered an influence on him, which we call a <em>parent node.</em> Likewise, Bob can be considered a <em>parent</em> of Anna, Carrie, and Erin, affecting their decisions as well.</p> <div class="img"> <img src="/assets/img/bb/bob.jpeg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>Importantly, in a Boolean network, we <strong>only</strong> need to know what the parents are doing to know what the <em>child</em> node of interest is doing. So what will Bob decide in each case?</p> <div class="img"> <img src="/assets/img/bb/bob_table.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>To figure it out, we can make what’s called a truth table, shown above. For each combination of “going” and “not going” that Anna, Carrie, and Erin can have (8 combinations, since they each have 2 choices and 2 x 2 x 2 = 8), we can use Bob’s “rule” to figure out what he will decide. For example, if none of his friends are going (first row), Bob will not go. If all of his friends are going (last row), Bob will go to the party.</p> <p>We can technically make this kind of table for each person in our network. Then all we have to do is figure out what the <em>parents</em> of each person are doing, and we can figure out if anyone changes their mind from whatever they initially desired. Furthermore, we can rewrite these rules (if we felt so inclined) as <em>Boolean functions,</em> which only make the rule sound more technical (and easier to understand mathematically, such as for a computer) by using <strong>and</strong>, <strong>or</strong>, and <strong>not</strong>.<sup>**</sup> For example, Kate’s rule is that she will go if both her friends, John and Anna, are going. We could also say that Kate’s decision is dependent on John <strong>and</strong> Anna, or KATE = JOHN AND ANNA. The truth table for Kate (or any <strong>and</strong> function) would look like this:</p> <div class="img"> <img src="/assets/img/bb/kate.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>Every one of our rules can be rewritten as a Boolean function, although some look a bit complicated. Try writing out the truth tables for C = A OR B, C = A AND NOT B, and C = (NOT A) OR C. Keep in mind that “or” in Boolean logic means “at least one of the other, including both.”</p> <p>We’re getting close to being able to solve our puzzle! We just need to talk about one more thing– how to <em>update</em> someone’s decision based on what their friends are doing. This is where initial conditions will come in. To see how this works, let’s once again look at a simpler problem. We’re going to consider the small network below, with the rules shown below it written in math!</p> <p>To clarify this network picture a little bit, let’s make a <em>wiring diagram.</em> We’re going to write the three nodes <em>before updating</em> and the three nodes <em>after updating.</em> This means that each person’s decision is based on what their friends have <em>previously decided.</em> For example, Bob’s friends may have already decided not to go, so he won’t go. If Bob’s friends change their mind, the top of the wiring diagram would change, and the bottom would reflect the change in Bob’s decision <em>in response</em> to his friends’ decisions. A little tricky, huh? It looks like this:</p> <div class="img"> <img src="/assets/img/bb/wiring.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>Using the rules for each node, we can also make a truth table for the entire network. In this case, we have condensed three truth tables into one, where the initial state of the three nodes determines the subsequent state of all three nodes. For example, let’s look at “State 1” in the table. A only turns on if B is on (the rule for A above is f<sub>A</sub> = B), so A will remain off since B is off. B turns on if A and C are both on, so it stays off as well. C turns on when A is off, so it indeed will turn on at this time. We can follow the same logic for the other initial states, and fill out this entire table.</p> <div class="img"> <img src="/assets/img/bb/truthtable.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>Lastly, we are going to make a <em>state transition graph.</em> Even though this looks like a network, don’t confuse it with the Boolean network above. Here, each node in the network is a different state, meaning each single node represents one state of the <em>entire</em> Boolean network. In this state transition graph, we’re going to draw out how to update the state based on the defined rules. For example, if we are ever in state 1 aka <code class="language-plaintext highlighter-rouge">[0,0,0]</code> in this smaller network, we know we will move to state 2 aka <code class="language-plaintext highlighter-rouge">[0,0,1]</code>. When we then look at that state in the second row of the truth table, we see something interesting: we stay in state <code class="language-plaintext highlighter-rouge">[0,0,1]</code>! Aha! We’ve reached an attractor, giving us the solution for this network if we start from <code class="language-plaintext highlighter-rouge">[0,0,0]</code>.</p> <p>What if we start from state 8, <code class="language-plaintext highlighter-rouge">[1,1,1]</code>? If you follow the same logic, you’ll find that we eventually end up in the same attractor as before, state 2 aka <code class="language-plaintext highlighter-rouge">[0,0,1]</code>. The state transition graph makes this clear:</p> <div class="img"> <img src="/assets/img/bb/stg.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="caption"> The left figure shows the state transition graph, with each state numbered by the truth table above. The left shows what the corresponding "landscape" might look like, where balls roll down through states to each attractors highlighted in orange. The right side of the landscape is really interesting because we have what's called a "cyclic attractor," where we get stuck in a cycle between 2 or more states. </div> <p>Interestingly, if we start in state 4, 6, or 3, we end up cycling between states 6 and 3 for eternity. This is a <em>cyclic attractor.</em></p> <p>Finally, back to our puzzle! Do you think you have the tools to solve it? Since there are so many people, there are a lot of possible initial conditions, and the state transition graph will be very large. However, we can still consider a few starting states: who goes to the party when no one wants to go initially, and who goes when everyone initially wants to go?</p> <p>Use the two tables below to fill in each additional row until you reach a stable attractor. That’s your solution! Make sure at each step, you reference the friends’ decisions in <em>the previous row, not the current row.</em> Good luck!</p> <div class="img"> <img src="/assets/img/bb/puzzle_table.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>Next post, I’ll talk about how we actually figure out the rules in the first place when we are talking about transcription factor networks.</p> <p><sup>*</sup> An interesting (yet somewhat debated) fact about biological networks is that they tend to be <a href="https://www.futurelearn.com/info/courses/complexity-and-uncertainty/0/steps/1855">“scale-free.”</a> Scale-invariance is a property meaning that the underlying structure of the network doesn’t change as the network grows. In scale-free networks, you will find that the distribution of edges connected to each node follows a power-law distribution. In simpler terms, this means that are there many nodes with only a few connections, and few nodes with many connections. This is true of airports (Atlanta is one of those few highly-connected nodes) and social networks (there are usually a few well-connected people), but also critical in biological networks where a few nodes have much more control than average. A great visualization of this can be found <a href="https://en.wikipedia.org/wiki/Scale_invariance"> here. </a> Centrality notions like scale-invariance can also have some interesting side effects, like the fact that <a href="https://en.wikipedia.org/wiki/Friendship_paradox#:~:text=The%20friendship%20paradox%20is%20the,in%20one's%20own%20friend%20group."> on average, most people have fewer friends than their friends have.</a></p> <p><sup>**</sup> If you’re super savvy with this Boolean language stuff, you might also include XOR, which means “exclusive or.” In Boolean language, “or” means something a little different than everyday language; instead of meaning “one or the other, but not both,” it means “at least one or the other, including both.” XOR is what we mean when we say “or” in the English langauge– “one of the other, but not both.”</p>]]></content><author><name></name></author><category term="booleabayes"/><category term="writing"/><category term="code"/><category term="blog"/><summary type="html"><![CDATA[This post takes a look what information we will need to gather in order to understand how cell identity is controlled.]]></summary></entry><entry><title type="html">BooleaBayes Part 1- The Why</title><link href="https://smgroves.github.io/blog/2021/booleabayes1/" rel="alternate" type="text/html" title="BooleaBayes Part 1- The Why"/><published>2021-02-01T00:00:00+00:00</published><updated>2021-02-01T00:00:00+00:00</updated><id>https://smgroves.github.io/blog/2021/booleabayes1</id><content type="html" xml:base="https://smgroves.github.io/blog/2021/booleabayes1/"><![CDATA[<p>Have you ever thought about how different cells in your body came to be? You may have heard that you have a particular <em>genome</em> that is shared by virtually all of your cells. So why does, for example, a heart cell act so differently from a lung cell? How does a cell located in your heart learn to “turn on” heart cell functions, and “turn off” lung cell functions? And if you took that heart cell and moved it to the lung, would it be able to change its function and start acting like a lung cell?</p> <p>These are all questions of cell identity. Cell identity can be defined in many different ways, but generally we think of a cell’s identity as the array of functioning proteins that cause a cell to have specific behaviors, whether that is in terms of interaction with other cells, functions in the body, or in response to external signals and perturbations. For example, the figure below shows a variety of cell types that exist within the lung, all of which have distinct functions, such as moving air and particles through the trachea (ciliated cells), cells that produce surfactant to protect the lung epithelium (club cells), or cells that assist in lung development and recovery after injury (Pulmonary Neurendocrine Cells, or PNECs).</p> <div class="img"> <img src="/assets/img/bb/lungcells.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="caption"> Wagner et al., 2016. </div> <p>All of these cells likely have the same genome, or specific patterns of DNA, if they come from the same (healthy) person. But they have different <em>phenotypes</em> and <em>proteomes</em> (amounts of an array of proteins in each cell), which can be driven by non-genetic processes at the <em>transcriptomic</em>, or RNA expression, level. So a cell’s identity– distinguished by its behaviors– is governed by the expression of genes required for certain functions.</p> <div class="img"> <img src="/assets/img/bb/dogma.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="caption"> Like an old-school printing press, DNA is a template that can be used to make many copies of messenger RNA, or mRNA. These RNA copies then get translated into proteins, which are the cellular machines that allow cells to function in different ways. The number of copies of RNA made from the DNA depends on many things, one of which is other proteins whose function is to decide how much DNA is transcribed. These proteins are called transcription factors. </div> <p>Often the control of gene expression, or transcriptional regulation, is ascribed to networks of transcription factors that affect the level of gene expression (amount of that gene’s RNA) in each cell. For example, the image below is showing three different TFs (two activators and one repressor), and when the TFs bind to their targeted regions of DNA, they affect how much of the target gene is transcribed and therefore how much of that protein is made.</p> <div class="img"> <img src="/assets/img/bb/tfs.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>These TFs do not work independently, but instead can be placed in a network that we call a gene regulatory network (GRN). Sets of interacting transcription factors (TFs) can “drive” cells towards a specific “identity” through concerted activities. GRNs can exist in multiple states and their dynamics can explain the coexistence of multiple stable cell types even within an isogenic (same genome) population. These dynamics also give cells the plasticity they need to undergo epigenetic changes necessary for response to perturbations and external signals. For example, in response to an external signal, the dynamics of the network shown here may cause the green gene expression to increase and the blue to decrease until the cell’s expression profile reaches a stable point. These dynamics of gene expression are how a cell might change its phenotype– for example, from a lung basal cell to a club cell.</p> <div class="img"> <img src="/assets/img/bb/grn.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="caption"> Transcription factors form a network, and the network changes over time, causing expression of genes to change over time. This is how a cell may change its identity from a basal cell, expressing the <i>blue</i> gene, to a club cell, expressing <i>green</i>. </div> <p>Because this single network under different conditions can produce varying phenotypes, we say that the network is capable of explaining the multi-stability of cell phenotypes that share a single genome.</p> <p>A very helpful (albeit limited) visualization tool for thinking about multiple stable cell types is a phenotypic landscape. If you have not heard of a phenotypic landscape before, it is an idea that was first proposed by a guy named <a href="https://archive.org/details/in.ernet.dli.2015.547782/page/n1/mode/2up">Waddington</a> to describe how cells differentiate from one cell type to another without necessarily changing their genome. You may be very unlikely to see a heart cell turn into a lung cell, but these types of changes in cell identity happen all the time in differentiation: a stem cell turns into more specialized cell types with specific functions. Waddington proposed that differentiation was like a ball rolling down a hill and falling into basins at the bottom of the hill that represent different steady states, or cell types. Here, we’re showing just one dimension of the landscape across the x axis, but you can think of each point on the x axis as a different cell type, and the y axis is the stability of that cell type. Similar to a ball rolling down a hill, if we place a cell someone on this landscape that is not in a basin, it will roll down into a nearby basin until it comes to a stop.</p> <div class="img"> <img src="/assets/img/bb/landscape.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="caption"> The network will eventually "calm down" until it reaches an equilibrium, like a thermostat (a very simple network) that eventually shuts off the AC when it reaches the right temperature. These steady states are the stable "attractors" of the network, and can be represented by valleys in a landscape. States higher in the landscape will continue to change until they eventually reach an attractor. </div> <p>Where these cells stop are called attractor states in the network, and these correspond to stable cell phenotypes we would see empirically, such as the basal and club cells we saw before. Importantly, attractor states are self-stabilizing, which means that if you perturb a cell by moving it a small distance from the attractor, it will roll back to its original starting place. We therefore think of the stability of each attractor as the depth and relative size of the basin of attraction surrounding it. Often this stability comes from feedback loops in the underlying network of interactions.</p> <p>In cancer, cells are defective in how they replicate DNA and partition it to daughter cells during cell division, which is a state we’ll refer to as genomic instability. This may be caused by defects in DNA repair, cell cycle checkpoints, improper apoptotic signaling that would normally cause cells with defects in the genome to die.</p> <p>Genetic instability is accompanied by non-genetic instability, or “plasticity,” meaning cancer cells are often able to traverse the landscape more easily. This is epitomized by the idea of a cancer stem cell, which has stem-like properties such as its proximity to immature attractor states. In normal development, there is a gradient to the landscape from stem cells to more stable differentiated cell types; thus, stem cells sit near the top of the “hill” and differentiated cells near the bottom. Cancer cells are pushed toward these abnormal cancer attractors in normally unused regions of the landscape that often look more and more like dedifferentiated cell types, with properties such as high proliferation and phenotypic plasticity. We think that this plasticity– the ability to reach a more stem-like cell state that can shape-shift into other cell types when needed– is what allows cancer cells to cope with, and eventually overcome, treatment. For Small Cell Lung Cancer, for example, within 5 years around 95% of patients succumb to cancer <strong>after</strong> they have already been treated and the cancer came back.</p> <div class="img"> <img src="/assets/img/bb/hill.jpg" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="caption"> Sui Huang, 2013. <i> Cancer Metastasis Rev. </i> </div> <p>So now we come to the problems we are trying to solve:</p> <blockquote> <p>How do cancer cells change their identities, and what can we do to stop them from changing into resistant cell types?</p> </blockquote> <p>Our answer: control the underlying regulatory network to control cell identity and keep the cells from becoming resistant in the first place. This is what the BooleaBayes computational tool does: it figures out the specifics of the GRN (how the transcription factors affect the expression of genes and which ones), and uses it to predict what would happen to each cell type if we were to make a sudden change in the network. If we find a change we can make that keeps the cells from turning into a resistant cell type, we can test that change using a genetic modification in a mouse, and eventually by targeting that gene in humans.</p> <p>See the next post to learn how we determine what the gene regulatory network looks like.</p>]]></content><author><name></name></author><category term="booleabayes"/><category term="code"/><category term="blog"/><category term="writing"/><summary type="html"><![CDATA[In this first post, I explain why we care about transcription factor networks and how they can help us treat Small Cell Lung Cancer.]]></summary></entry><entry><title type="html">BooleaBayes Overview</title><link href="https://smgroves.github.io/blog/2021/booleabayes-overview/" rel="alternate" type="text/html" title="BooleaBayes Overview"/><published>2021-01-31T00:00:00+00:00</published><updated>2021-01-31T00:00:00+00:00</updated><id>https://smgroves.github.io/blog/2021/booleabayes-overview</id><content type="html" xml:base="https://smgroves.github.io/blog/2021/booleabayes-overview/"><![CDATA[<p>To see the code and documentation, please visit <a href="https://github.com/smgroves/BooleaBayes">Github</a> or <a href="https://pypi.org/project/booleabayes/">PYPI</a> for instructions on installing the package.</p> <h2 id="part-1-the-why">Part 1: The Why</h2> <p>In this first post, I explain why we care about transcription factor networks and how they can help us treat Small Cell Lung Cancer. <br/> <a href="https://smgroves.github.io/blog/2021/booleabayes1/">Read More</a>.</p> <h2 id="part-2-network-structure-and-dynamics">Part 2: Network structure and dynamics</h2> <p>This post takes a look what information we will need to gather in order to understand how cell identity is controlled. <br/> <a href="https://smgroves.github.io/blog/2021/booleabayes2/">Read More</a>.</p> <h2 id="part-3-using-data-to-build-a-network-for-small-cell-lung-cancer">Part 3: Using data to build a network for Small Cell Lung Cancer</h2> <p>We begin to look at how BooleaBayes, the computational tool developed in the Quaranta lab by David Wooten, PhD and me, can be applied to Small Cell Lung Cancer Data. <br/> <a href="https://smgroves.github.io/blog/2021/booleabayes3/">Read More</a>.</p> <h2 id="part-4-how-good-is-our-model">Part 4: How good is our model?</h2> <p>How can we be sure that our model’s predictions will be accurate and tell us something new?</p> <h2 id="part-5-so-can-we-cure-small-cell-lung-cancer-yet">Part 5: So… can we cure Small Cell Lung Cancer yet?</h2> <p>Where we are with targeting cell plasticity as a form of therapy.</p> <p>*Posts are adapted from my talk on <a href="http://smgroves.github.io/about/talks/">Network Control of Phenotypic Plasticity in SCLC.</a></p>]]></content><author><name></name></author><category term="booleabayes"/><category term="code"/><category term="blog"/><category term="writing"/><summary type="html"><![CDATA[This analysis was written to analyze transcription factor networks for Small Cell Lung Cancer phenotypes. I've written a primer on gene regulatory network dynamics and how our computational tool is able to define them and make predictions about the future using gene expression data-- RNA sequencing data that tells you the identity of a population of cells.]]></summary></entry><entry><title type="html">What is Complexity?</title><link href="https://smgroves.github.io/blog/2020/complexity/" rel="alternate" type="text/html" title="What is Complexity?"/><published>2020-05-26T00:00:00+00:00</published><updated>2020-05-26T00:00:00+00:00</updated><id>https://smgroves.github.io/blog/2020/complexity</id><content type="html" xml:base="https://smgroves.github.io/blog/2020/complexity/"><![CDATA[<p>What is complexity? This is the question we start with each spring semester for the Introduction to Cancer Systems Biology course I teach at Vanderbilt. We usually ask the students to come up with examples of what they think qualify as complex systems. Because it is a class focused on cancer, someone usually pipes up with just that response: a tumor, an organ, or even an entire human begin, can be thought of as a complex system. Someone usually thinks of the weather—maybe because they’ve heard before that weather is chaotic, or something about a butterfly effect. Sometimes someone will mix up “complex” with “complicated” systems, and, to be fair, these words generally mean the same thing except in the context of systems biology. (Complex systems are what I will describe below. Complicated systems are, well, just hard problems.)</p> <p>There are a few different vague definitions of complexity itself, but I think it is much more helpful to think of complex systems to get an idea for some characteristics of complexity based on real life examples. A good one to start with is ants.</p> <p>How simple is an ant? When you consider one ant on its own, it really can’t do much. As Nigel Franks, an ant researcher, has said, “if 100 army ants are placed on a flat surface, they will walk around and around in never decreasing circles until they die of exhaustion.” Generally, we don’t think of ants as having much capacity for consciousness, and so they act almost like little automatons with very simple rules. In systems biology, we might call each ant an “agent.” Ants will interact with their environments according to some instinctual rules; they will act to reduce their hunger by finding food, for example. And when they come across other ants, they might follow their trails of pheromones, laying down their own chemical signals to attract other ants as well. This is why ants often crawl in lines, following each other to search for food.</p> <p>None of these behaviors on their own are particularly complex. Even some of the simplest life forms on earth can communicate by sending out or receiving signals and reacting appropriately. What makes a system of ants really special—which you’ll know if you ever had an ant farm growing up or have watched them build an anthill— is that when you get a large number of ants together, they can create some pretty complex structures. Without any kind of centralized control (like a CEO ant directing the other ants where to go), an ant colony can work together cooperatively to accomplish very complex tasks, each working off a basic, simplistic set of rules for interacting with their environment. We call this a decentralized, self-organizing system. A complex act—building a tunnel, for example—is accomplished using very simple components—autonomous agents reacting to their environments.</p> <p>The important thing to remember here is that you can’t understand the complex behavior by considering a single ant, because the whole is more than the sum of its parts. This is called emergent behavior, and includes self-organization in the case of ants, but also might include information processing (such as single neurons firing in the brain to create a complex network of interactions that can process information), evolution, and learning. This is what systems biology is all about—understanding how emergent behaviors can arise out of relatively simple components. Rather than using reductionism to investigate each part (which, of course, also has its place in science), systems biology aims to figure out how to build up those parts to make something. For example, reductionist biology is like taking a car apart to understand each piece. Systems biology is like trying build a car that will run, given relatively simple components.</p> <p>Cancer acts as a complex system for some of the same reasons ant colonies do: tumors are made up of single cells, which are made up of relatively simpler components (proteins, DNA, RNA), which, at their heart, are just made up of chemicals, and yet the tumor system as a whole is able to devastate the human body. How can organized chemicals—carbon, oxygen, hydrogen, the works—create something without centralized control to kill a human? We can try to understand what each of the cells in the tumor and the surrounding microenvironment are doing, but we also need to understand how they communicate and interact (and how the components of cells communicate and interact) to form emergent behaviors such as self-organization and evolution. Often, systems biologists like to think of these interactions between components as networks, much like a network of people on Facebook or Twitter. But what makes some of these systems complex (whole greater than the sum of its parts), while others are simply hard problems to solve? Remember, a bunch of components don’t necessarily make a complex system with emergent behaviors—for example, if you’re trying to figure out where a golf ball will land based on the terrain, the way the golfer hits the ball, the wind that day, etc., you have a lot to consider, but it’s just a hard physics problem, not really a complex system.</p> <p>One other example I like to use to explain complex systems, and specifically why we need mathematical modeling to understand them, is Conway’s Game of Life. There is a well fleshed out Wikipedia article on this, so I won’t go into too much detail here. The concept of this game, devised by mathematician John Horton Conway in 1970, is very simple: little “cells” or automatons (agents acting according their own set of rules, without centralized control) evolve in a way that depends only on where they begin in a grid of indeterminate size. For example, let’s start like this:</p> <div class="img"> <img src="/assets/img/complexity/complexity1.jpg" style="height: 50%; width: 50%; object-fit: contain"/> </div> <p>Any live cell with fewer than two live neighbors dies, as if by underpopulation.Each black square is a cell that acts according to these simple rules regarding its interactions with its 8 neighboring cells (including corners):</p> <p>Any live cell with two or three live neighbors lives on to the next generation. Any live cell with more than three live neighbors dies, as if by overpopulation. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. So in the next iteration of our game above, some of the cells will “die” due to underpopulation (red cells), and some new cells will spring up where they touch three live neighbors (grey):</p> <div class="img"> <img src="/assets/img/complexity/complexity2.jpg" style="height: 50%; width: 50%; object-fit: contain"/> </div> <p>That’s all there is to it. You can continue the game we have above, and eventually you’ll get to a point where the cells won’t change any more (steady state equilibrium), or where they flicker through a cycle of the same few states (usually between 2 states, but sometimes more—this is a cyclical equilibrium). Can you guess how the game above will end?</p> <p>The rules are simple, the agents are simple, and yet… there is no way to figure out how the game will end except by actually going step by step. There’s no equation or shortcut that will tell you how the game will end, given any starting conditions. Of course, over time, we’ve learned some of the possible ending configurations, some of which are detailed in <a href="https://www.theguardian.com/science/alexs-adventures-in-numberland/2014/dec/15/the-game-of-life-a-beginners-guide">this article</a>.</p> <p>But if your starting point is even one cell different than the example configurations above, it could completely change the ending point. This tiny change leading to a very different outcome is an example of a chaotic system, which is why it’s so hard to predict what will happen. For example, in a chaotic weather system (read: any weather system), even if we can measure conditions today with an error as small as say 0.00001% (which is exceptional), we still won’t know what’s going to happen ten days down the line. Bettering weather prediction is not really a matter of getting more confident in measuring what we know today; the unpredictability of weather is a behavior of the chaotic system.</p> <p>The important thing here is that we can’t figure out what is going to happen, in the Game of Life or in weather, without actually… well, watching it happen. But what good is a prediction if you can only make it in real time? We need a way to “speed up” what’s going to happen: to use the starting conditions, run through the scenario faster than we are in real life, and figure out, with some degree of certainty, what will happen in real life. For the Game of Life, this is simple: just follow the rules and step though each iteration until it stops moving (or ends in a cyclical pattern). Since the Game of Life isn’t actually evolving over real time, it doesn’t matter how fast or slow this “simulation” is. With weather, we would theoretically like to use today’s conditions (and maybe a few from the recent past, or the same day last year, etc.) to predict, right now, what will happen a week from now. The way we do this is to again “simulate:” run through the “rules” of the system to see where we will be in 7 days, in faster than 7 days (again, if it takes you a week to predict what will happen, that’s not a prediction). We do this using computers, and mathematical models that put the rules of the complex system into a relatively simple, coherent “language” (i.e. math speak) and then simulate to see what happens. Just like in experimental biology, where a “model” might mean a mouse—a somewhat simpler substitute for the real thing that we can gain insights from—a mathematical model is a simpler, faster substitute for what is evolving in real life. No model is perfectly “correct”—just like a tumor in a mouse is not the same thing as a tumor in a human. But some models are useful, and we can gain valuable insights into how tumors grow, evolve, and evade treatment, and maybe, just maybe, figure out how to beat them.</p> <p><a href="https://quarantalab.com/what-is-complexity/">See original published article here</a>.</p>]]></content><author><name></name></author><category term="complexity"/><category term="writing"/><summary type="html"><![CDATA[Cancer acts as a complex system for some of the same reasons ant colonies do--tumors are made up of single cells, which are made up of relatively simpler components (proteins, DNA, RNA), which, at their heart, are just made up of chemicals, and yet the tumor system as a whole is able to devastate the human body.]]></summary></entry></feed>